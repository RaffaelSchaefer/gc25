generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(uuid())
  name          String
  email         String             @unique
  emailVerified Boolean
  image         String?
  isAdmin       Boolean            @default(false)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  accounts      Account[]
  comments      Comment[]
  createdEvents Event[]            @relation("CreatedEvents")
  updatedEvents Event[]            @relation("UpdatedEvents")
  participants  EventParticipant[]
  sessions      Session[]
  goodies       Goodie[]           @relation("GoodiesCreated")
  goodieVotes   GoodieVote[]
  goodieCollections GoodieCollection[]

  // AI Rate Limit Felder
  aiUsageCount   Int                @default(0) // Anzahl der AI-Nutzungen im aktuellen Zeitraum
  aiUsageReset   DateTime?          // Zeitpunkt, wann das Limit zur√ºckgesetzt wird
  aiUsageLimit   Int?               // Optional: individuelles Limit pro User

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([accountId, providerId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Event {
  id           String             @id @default(uuid())
  createdAt    DateTime           @default(now())
  createdById  String
  updatedAt    DateTime           @updatedAt
  updatedById  String?
  status       EventStatus        @default(DRAFT)
  isPublic     Boolean            @default(false)
  isFixed      Boolean            @default(false)
  category     EventCategory      @default(MEETUP)
  name         String             @db.VarChar(120)
  slug         String?            @unique
  description  String
  summary      String?            @db.VarChar(280)
  startDate    DateTime
  endDate      DateTime
  location     String?
  url          String?
  comments     Comment[]
  createdBy    User               @relation("CreatedEvents", fields: [createdById], references: [id])
  updatedBy    User?              @relation("UpdatedEvents", fields: [updatedById], references: [id])
  participants EventParticipant[]

  @@index([createdById])
  @@index([updatedById])
  @@index([status])
  @@index([isPublic, startDate])
  @@index([startDate])
  @@map("event")
}

model Comment {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  createdById String
  content     String
  eventId     String
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([createdById])
  @@map("comment")
}

model EventParticipant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  eventId   String
  reminderEnabled Boolean @default(true)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId])
  @@index([userId])
  @@map("event_participant")
}

// =========================
// Goodie Tracker Models
// =========================

model Goodie {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdById    String
  type           GoodieType
  name           String       @db.VarChar(140)
  location       String       @db.VarChar(140)
  instructions   String
  date           DateTime?
  registrationUrl String?     @db.VarChar(300)
  imageBytes     Bytes?
  reminderEnabled Boolean @default(true)

  createdBy      User         @relation("GoodiesCreated", fields: [createdById], references: [id], onDelete: Cascade)
  votes          GoodieVote[]
  collections    GoodieCollection[]

  @@index([createdById])
  @@index([type])
  @@index([date])
  @@map("goodie")
}

model GoodieVote {
  id        String   @id @default(uuid())
  userId    String
  goodieId  String
  value     Int      // -1 or 1
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goodie    Goodie   @relation(fields: [goodieId], references: [id], onDelete: Cascade)

  @@unique([userId, goodieId])
  @@index([goodieId])
  @@map("goodie_vote")
}

model GoodieCollection {
  id         String   @id @default(uuid())
  userId     String
  goodieId   String
  collectedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goodie     Goodie   @relation(fields: [goodieId], references: [id], onDelete: Cascade)

  @@unique([userId, goodieId])
  @@index([goodieId])
  @@map("goodie_collection")
}

enum GoodieType {
  GIFT
  FOOD
  DRINK
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELED
}

enum EventCategory {
  MEETUP
  EXPO
  FOOD
  PARTY
  TRAVEL
  TOURNAMENT
}
